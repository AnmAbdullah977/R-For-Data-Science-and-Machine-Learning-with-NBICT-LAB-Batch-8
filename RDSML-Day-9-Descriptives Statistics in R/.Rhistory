5+6
a = 11
b = 7.19
class(a)
class(b)
class(b)
name = 'Abdullah'
print(name)
class(name)
c = '52'
print(c + 9)
print(a + 9)
# Logical Data Type - TRUE, FALSE (T, F)
a > b
# Logical Data Type - TRUE, FALSE (T, F)
class(a > b)
print(a < b)
x = 19
y = 22-3
print(x == y)
print(x != y)
print(y > x)
print(y >= x)
# Logical Operator in R
4 == 4 && 5 == 5
T && T
F && T
T && F
# Logical Operator in R
# && LOGICAL OPERATOR
# || LOGICAL OPERATOR
x !=y || x ==y
T || F
T || T
F || F
# SIMPLE MATHMATICAL OPERTOTS IN R
z = 6 + 9 - 8 * 2 / 3
print(z)
# SIMPLE MATHMATICAL OPERTOTS IN R
z = 6 + 9 - 8 * (2 / 3)
w = 4 + 3 - 3 * 2 / 3
print(w)
y = 4^2
print(y)
11 / 5
11 %% 5
11 %/% 5
# Data Types in R
# 1. Numeric - Integer / Floating
# 2. String/character - Abdullah
# 3. Logical
a = 11
b = 7.19
class(a)
class(b)
name = 'Abdullah'
print(name)
class(name)
c = '52'
# print(c + 9)
print(a + 9)
# Logical Data Type - TRUE, FALSE (T, F)
class(a > b)
print(a < b)
x = 19
y = 22-3
print(x == y)
print(x != y)
print(y >= x)
# Logical Operator in R
# && LOGICAL OPERATOR
# || LOGICAL OPERATOR
x != y || x == y
# SIMPLE MATHMATICAL OPERTOTS IN R
z = 6 + 9 - 8 * (2 / 3)
print(z)
w = 4 + 3 - 3 * 2 / 3
print(w)
y = 4^2
print(y)
11 / 5
11 %/% 5
data = c(9, 6, 17, 31, 11)
x = mean(data)
summary(data)
z = x
data = c(9, 6, 17, 31, 11)
x = mean(data)
summary(data)
z = x
z = x/2
setwd("~/GitHub/R-For-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-9-Descriptives Statistics in R")
head(nycflights13::flights)
summary(distance)
attach(nycflights::flights)
attach(nycflights13::flights)
summary(distance)
library(psych)
library(psych)
demo = cbind(arr_delay, dep_delay, distance)
describe(demo)
demo = cbind(arr_delay, dep_delay, distance)
describe(demo)
demo = cbind(arr_delay, dep_delay, distance)
# Descriptive statistics using the psych package
# install.packages("psych")
library(psych)
data()
AirPassengers
BOD
# Using the New York airport flight data
# install.packages("nycflights13")
attach(nycflights13::flights)
# Lets look at the first 6 records using the head() function
head(nycflights13::flights)
distance
summary(distance)
describe(distance)
demo = cbind(arr_delay, dep_delay, distance)
describe(demo)
# Introducing the hist () function
dep_delay
hist(dep_delay)
# How to group descriptive statistics
head(nycflights13::flights)
summary(carrier)
carrierFact = factor(carrier)
summary(carrierFact)
describeBy(distance, group = carrier)
# Two levels of aggregation
aggregate(distance, by = list(carrier, month), FUN = mean, na.rm = TRUE)
aggregate(distance, by = list(carrier, month), FUN = sd, na.rm = TRUE)
# Descriptive statistics using the psych package
# install.packages("psych")
library(psych)
data()
AirPassengers
BOD
# Using the New York airport flight data
# install.packages("nycflights13")
attach(nycflights13::flights)
# Lets look at the first 6 records using the head() function
head(nycflights13::flights)
distance
summary(distance)
describe(distance)
demo = cbind(arr_delay, dep_delay, distance)
describe(demo)
# Introducing the colnames() function
colnames(demo) = c('Arrival delay', 'Departure Delay', 'Distance Travelled')
describe(demo)
# Introducing the hist() function
dep_delay
hist(dep_delay)
# How to group descriptive statistics
head(nycflights13::flights)
summary(carrier)
carrierFact = factor(carrier)
summary(carrierFact)
describeBy(distance, group = carrier)
# Two levels of aggregation
aggregate(distance, by = list(carrier, month), FUN = mean, na.rm = TRUE)
aggregate(distance, by = list(carrier, month), FUN = sd, na.rm = TRUE)
